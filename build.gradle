buildscript {
    ext {
        set('springBootVersion', '2.3.1.RELEASE')
        set('springDependencyManagementVersion', '1.0.9.RELEASE')
        set('gradleDependencyUpdatesVersion', '0.28.0')
        set('sonarqubeVersion', '3.0')
        set('asciiDoctorVersion', '3.2.0')
        set('mapStructVersion', '1.3.1.Final')
        set('auth0JWTVersion', '3.10.3')
        set('dependencyOverrides', [
                'org.mapstruct': mapStructVersion,
        ])
    }
}

plugins {
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion" apply false
    id 'com.github.ben-manes.versions' version "$gradleDependencyUpdatesVersion"
    id 'org.sonarqube' version "$sonarqubeVersion"
    id 'idea'
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'jacoco'

    group = 'com.sicom.ms'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '14'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }

        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (dependencyOverrides.containsKey(details.requested.group)) {
                    details.useVersion dependencyOverrides[details.requested.group] as String
                    details.because 'SICOM globally configured version'
                }
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'org.slf4j:slf4j-api'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'io.projectreactor:reactor-test'
        implementation('com.fasterxml.jackson.core:jackson-annotations')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }
    }

    test {
        useJUnitPlatform()
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects { subProject ->
        subProject.plugins.withType(JacocoPlugin).configureEach {
            subProject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subProject.sourceSets.main as SourceSet
            }

            subProject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    reports {
        xml.enabled true
        html.enabled true
    }
}

//sonarqube {
//    properties {
//        property 'sonar.projectKey', 'com.compensar.holavivienda:parametrization-api'
//        property 'sonar.host.url', 'http://174.129.1.154'
//        property 'sonar.coverage.jacoco.xmlReportPaths',
//                "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
//    }
//}
